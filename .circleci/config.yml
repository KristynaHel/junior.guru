version: 2.1


executors:
  python-js:
    docker:
      - image: cimg/python:3.10.6-browsers
    working_directory: ~/project


orbs:
  git-shallow-clone: guitarrapc/git-shallow-clone@2.4.1


commands:
  enable-github-pushing:
    steps:
      - add_ssh_keys:
          fingerprints:
            - "7b:0b:2c:9f:fb:18:db:35:8e:f4:3d:49:73:37:ee:c4"
      - run:
          name: Add GitHub to known hosts
          command: |
            mkdir -p ~/.ssh
            ssh-keyscan github.com >> ~/.ssh/known_hosts
      - run:
          name: Set Ku≈ôe as the Git user
          command: |
            git config user.email "kure@junior.guru"
            git config user.name "Ku≈ôe"


jobs:
  install:
    executor: python-js
    steps:
      - git-shallow-clone/checkout
      - restore_cache:
          key: deps-{{ checksum "poetry.lock" }}-{{ checksum "package-lock.json" }}
      - run:
          name: Create the .today file for caching purposes
          command: |
            date +'%Y-%m-%d' > .today
      - run:
          name: Update Poetry
          command: |
            poetry --version
            poetry self update 1.2.2
      - run:
          name: Install Python dependencies
          command: poetry install -vvv
      - run:
          name: Install browser
          command: poetry run playwright install firefox
      - run:
          name: Install JavaScript dependencies
          command: npm ci
      - run:
          name: Cancel previous builds
          command: |
            poetry run jg cancel-previous-builds
      - save_cache:
          key: deps-{{ checksum "poetry.lock" }}-{{ checksum "package-lock.json" }}
          paths:
            - ~/.cache/pypoetry/virtualenvs
            - ~/.cache/ms-playwright
            - ./node_modules
      - persist_to_workspace:
          root: "~"
          paths:
              - .cache/pypoetry/virtualenvs
              - .cache/ms-playwright
              - project

  lint-and-test:
    executor: python-js
    steps:
      - attach_workspace:
          at: "~"
      - run:
          name: Lint
          command: poetry run jg lint
      - run:
          name: Test
          command: poetry run jg test -v

  # Needs $GOOGLE_SERVICE_ACCOUNT, $FIOBANK_API_KEY, $DISCORD_API_KEY, $MEMBERFUL_API_KEY, $VIDEO_OUTSOURCING_TOKEN
  sync-1:
    executor: python-js
    resource_class: large
    parallelism: 8
    steps:
      - attach_workspace:
          at: "~"
      - restore_cache:  # caches all HTTP communication of the scrapers for one day
          key: scrapy-v1-{{ .Branch }}-{{ checksum ".today" }}
      - restore_cache:  # get jobs data persisted between builds
          key: jobs-v2-{{ .Branch }}
      - restore_cache:  # makes jobs-emails idempotent
          key: jobs-emails-v2-{{ .Branch }}
      - run:
          name: Snapshot files
          command: poetry run jg data snapshot
      - run:
          name: Sync data
          command: |
            if [[ $CIRCLE_BRANCH = "main" ]]; then
              export GOOGLE_SHEETS_MUTATIONS_ENABLED=1
              export DISCORD_MUTATIONS_ENABLED=1
              export MEMBERFUL_MUTATIONS_ENABLED=1
              #export JOBS_EMAILS_SENDING_ENABLED=1
            fi
            poetry run jg sync ci
      - run:
          name: Prepare changed files for persisting
          command: poetry run jg data persist $CIRCLE_NODE_INDEX --move
      - persist_to_workspace:
          root: "~"
          paths:
              - project/persist-to-workspace

  data-1:
    executor: python-js
    steps:
      - attach_workspace:
          at: "~"
      - run:
          name: Load data
          command: poetry run jg data load --move
      - persist_to_workspace:
          root: "~"
          paths:
              - project/juniorguru/data
              - project/juniorguru/images

  # Needs $GOOGLE_SERVICE_ACCOUNT, $FIOBANK_API_KEY, $DISCORD_API_KEY, $MEMBERFUL_API_KEY
  sync-2:
    executor: python-js
    resource_class: large
    parallelism: 9
    steps:
      - attach_workspace:
          at: "~"
      - run:
          name: Snapshot files
          command: poetry run jg data snapshot
      - run:
          name: Sync data
          command: |
            if [[ $CIRCLE_BRANCH = "main" ]]; then
              export GOOGLE_SHEETS_MUTATIONS_ENABLED=1
              export DISCORD_MUTATIONS_ENABLED=1
              export MEMBERFUL_MUTATIONS_ENABLED=1
              #export JOBS_EMAILS_SENDING_ENABLED=1
            fi
            poetry run jg sync ci
      - run:
          name: Prepare changed files for persisting
          command: poetry run jg data persist $CIRCLE_NODE_INDEX --move
      - persist_to_workspace:
          root: "~"
          paths:
              - project/persist-to-workspace

  data-2:
    executor: python-js
    steps:
      - attach_workspace:
          at: "~"
      - run:
          name: Load data
          command: poetry run jg data load --move
      - save_cache:  # caches all HTTP communication of the scrapers for one day
          key: scrapy-v1-{{ .Branch }}-{{ checksum ".today" }}
          paths:
            - .scrapy
      - save_cache:  # persisting the jobs data between builds
          key: jobs-v2-{{ .Branch }}-{{ checksum ".today" }}
          paths:
            - juniorguru/data/jobs
      - save_cache:  # makes jobs-emails idempotent
          key: jobs-emails-v2-{{ .Branch }}-{{ checksum ".today" }}
          paths:
            - juniorguru/data/jobs-emails.txt
      - persist_to_workspace:
          root: "~"
          paths:
              - project/juniorguru/data
              - project/juniorguru/images
      - enable-github-pushing
      - run:
          name: Save to GitHub
          command: poetry run jg save-changes juniorguru/data/podcast.yml --message="record media properties üéöÔ∏è"

  web:
    executor: python-js
    resource_class: large
    steps:
      - attach_workspace:
          at: "~"
      - run:
          name: Build web
          command: poetry run jg web build
      - persist_to_workspace:
          root: "~"
          paths:
              - project/public

  format:
    executor: python-js
    steps:
      - attach_workspace:
          at: "~"
      - run:
          name: Reset repo
          command: poetry run jg reset-repo
      - run:
          name: Format code
          command: poetry run jg format .
      - enable-github-pushing
      - run:
          name: Save to GitHub
          command: poetry run jg save-changes . --message="format code üíÖ"

  backup:
    executor: python-js
    steps:
      - attach_workspace:
          at: "~"
      - run:
          name: Backups
          command: poetry run jg backup --discord
      - store_artifacts:
          path: ./backup.tar.gz

  deploy-web:
    executor: python-js
    steps:
      - attach_workspace:
          at: "~"
      - enable-github-pushing
      - run:
          name: Deploy to GitHub Pages
          command: poetry run jg deploy

  check-docs:
    executor: python-js
    steps:
      - attach_workspace:
          at: "~"
      - run: poetry run jg check-docs

  check-links:
    executor: python-js
    steps:
      - attach_workspace:
          at: "~"
      - run: poetry run jg check-links --retry


workflows:
  push:
    jobs:
      - install
      - lint-and-test:
          requires:
            - install
      - format:
          filters:
            branches:
              only:
                - main
          requires:
            - lint-and-test
      - sync-1:
          requires:
            - install
      - data-1:
          requires:
            - sync-1
      - sync-2:
          requires:
            - data-1
      - data-2:
          requires:
            - sync-2
      - web:
          requires:
            - data-2
      - check-docs:
          requires:
            - web
      - deploy-web:
          filters:
            branches:
              only:
                - main
          requires:
            - web
            - lint-and-test

  nightly:
    jobs:
      - install
      - sync-1:
          requires:
            - install
      - data-1:
          requires:
            - sync-1
      - sync-2:
          requires:
            - data-1
      - data-2:
          requires:
            - sync-2
      - web:
          requires:
            - data-2
      - backup:
          requires:
            - web
      - check-links:
          requires:
            - web
      - deploy-web:
          requires:
            - web
    triggers:
      - schedule:
          cron: "0 4 * * *"
          filters:
            branches:
              only:
                - main
