version: 2.1


executors:
  python-js:
    docker:
      - image: cimg/python:3.10.6-browsers
    working_directory: ~/project


orbs:
  gh-pages: sugarshin/gh-pages@0.0.6
  git-shallow-clone: guitarrapc/git-shallow-clone@2.4.0


jobs:
  install:
    executor: python-js
    steps:
      - git-shallow-clone/checkout
      - restore_cache:
          key: deps-{{ checksum "poetry.lock" }}-{{ checksum "package-lock.json" }}
      - run:
          name: Create the .today file for caching purposes
          command: |
            date +'%Y-%m-%d' > .today
      - run:
          name: Install dependencies
          command: |
            poetry --version
            poetry self update
            poetry install
            poetry run playwright install chromium
            npm ci
      - run:
          name: Cancel previous builds
          command: |
            poetry run jg cancel-previous-builds
      - save_cache:
          key: deps-{{ checksum "poetry.lock" }}-{{ checksum "package-lock.json" }}
          paths:
            - ~/.cache/pypoetry/virtualenvs
            - ~/.cache/ms-playwright
            - ./node_modules
      - persist_to_workspace:
          root: "~"
          paths:
              - .cache/pypoetry/virtualenvs
              - .cache/ms-playwright
              - project

  lint-and-test:
    executor: python-js
    steps:
      - attach_workspace:
          at: "~"
      - run:
          name: Lint
          command: poetry run jg lint
      - run:
          name: Test
          command: poetry run jg test -v

  # Needs $GOOGLE_SERVICE_ACCOUNT, $FIOBANK_API_KEY, $DISCORD_API_KEY, $MEMBERFUL_API_KEY
  sync:
    executor: python-js
    resource_class: large
    parallelism: 3
    steps:
      - attach_workspace:
          at: "~"
      - restore_cache:  # caches all HTTP communication of the scrapers for one day
          key: scrapy-v1-{{ .Branch }}-{{ checksum ".today" }}
      - restore_cache:  # get jobs data persisted between builds
          key: jobs-v2-{{ .Branch }}
      - restore_cache:  # makes jobs-emails idempotent
          key: jobs-emails-v2-{{ .Branch }}
      - run:
          name: Snapshot files
          command: |
            poetry run jg data snapshot
      - run:
          name: Sync data
          command: |
            CHAIN=$(poetry run jg sync --chains | circleci tests split)
            if [[ $CIRCLE_BRANCH = "main" ]]; then
              export GOOGLE_SHEETS_MUTATIONS_ENABLED=1
              export DISCORD_MUTATIONS_ENABLED=1
              export MEMBERFUL_MUTATIONS_ENABLED=1
              # export JOBS_EMAILS_SENDING_ENABLED=1
            fi
            poetry run jg sync $CHAIN
      - save_cache:  # caches all HTTP communication of the scrapers for one day
          key: scrapy-test
          paths:
            - .scrapy
      - run:
          name: Prepare modified files for persisting
          command: |
            poetry run jg data persist $CIRCLE_NODE_INDEX
      - persist_to_workspace:
          root: "~"
          paths:
              - project/persist-to-workspace

  # data:
  #   executor: python-js
  #   steps:
  #     - attach_workspace:
  #         at: "~"
  #     - run:
  #         name: Load data
  #         command: |
  #           poetry run jg data load
  #     - save_cache:  # caches all HTTP communication of the scrapers for one day
  #         key: scrapy-v1-{{ .Branch }}-{{ checksum ".today" }}
  #         paths:
  #           - .scrapy
  #     - save_cache:  # persisting the jobs data between builds
  #         key: jobs-v2-{{ .Branch }}-{{ checksum ".today" }}
  #         paths:
  #           - juniorguru/data/jobs
  #     - save_cache:  # makes jobs-emails idempotent
  #         key: jobs-emails-v2-{{ .Branch }}-{{ checksum ".today" }}
  #         paths:
  #           - juniorguru/data/jobs-emails.txt
  #     - persist_to_workspace:
  #         root: "~"
  #         paths:
  #             - project/juniorguru/data
  #             - project/juniorguru/images

  build-web:
    executor: python-js
    resource_class: large
    steps:
      - attach_workspace:
          at: "~"
      - run: poetry run jg web build
      - persist_to_workspace:
          root: "~"
          paths:
              - project/public

  backup:
    executor: python-js
    steps:
      - attach_workspace:
          at: "~"
      - run: tar -cvzf backup.tar.gz ./juniorguru/data
      - store_artifacts:
          path: ./backup.tar.gz

  deploy-web:
    executor: python-js
    steps:
      - attach_workspace:
          at: "~"
      - add_ssh_keys:
          fingerprints:
            - "7b:0b:2c:9f:fb:18:db:35:8e:f4:3d:49:73:37:ee:c4"
      - run: mkdir -p ~/.ssh
      - run: ssh-keyscan github.com >> ~/.ssh/known_hosts
      - run: touch public/.nojekyll
      - run: echo "junior.guru" > public/CNAME
      - gh-pages/deploy:
          build-dir: "public"
          git-email: "kure@junior.guru"
          git-user: "Ku≈ôe"
          commit-message: '"üê£ deployment of ${COMMIT} [skip ci]"'
          ssh-fingerprints: "7b:0b:2c:9f:fb:18:db:35:8e:f4:3d:49:73:37:ee:c4"
          tmp-dir: ".deploy-tmp"
          workspace-root: "~/project"

  check-docs:
    executor: python-js
    steps:
      - attach_workspace:
          at: "~"
      - run: poetry run jg check-docs

  check-links:
    executor: python-js
    steps:
      - attach_workspace:
          at: "~"
      - run: poetry run jg check-links --retry


workflows:
  version: 2

  push:
    jobs:
      - install
      - lint-and-test:
          requires:
            - install
      - sync:
          requires:
            - install
      # - data:
      #     requires:
      #       - sync
      # - build-web:
      #     requires:
      #       - data
      # - check-docs:
      #     requires:
      #       - build-web
      # - deploy-web:
      #     filters:
      #       branches:
      #         only:
      #           - main
      #     requires:
      #       - build-web
      #       - lint-and-test

  nightly:
    jobs:
      - install
      - sync:
          requires:
            - install
      # - data:
      #     requires:
      #       - sync
      # - build-web:
      #     requires:
      #       - data
      # - backup:
      #     requires:
      #       - build-web
      # - check-links:
      #     requires:
      #       - build-web
      # - deploy-web:
      #     requires:
      #       - build-web
    triggers:
      - schedule:
          cron: "0 4 * * *"
          filters:
            branches:
              only:
                - main
