version: 2.1


executors:
  python-js:
    docker:
      - image: circleci/python:3.8-node-browsers
    working_directory: ~/project


orbs:
  gh-pages: sugarshin/gh-pages@0.0.6


jobs:
  install:
    executor: python-js
    steps:
      - checkout
      - restore_cache:
          key: deps-{{ checksum "poetry.lock" }}-{{ checksum "package-lock.json" }}
      - run:
          name: Install dependencies
          command: poetry install && npm ci
      - save_cache:
          key: deps-{{ checksum "poetry.lock" }}-{{ checksum "package-lock.json" }}
          paths:
            - ~/.cache/pypoetry/virtualenvs
            - ./node_modules
      - persist_to_workspace:
          root: "~"
          paths:
              - .cache/pypoetry/virtualenvs
              - project/node_modules
              - project

  lint-and-test:
    executor: python-js
    steps:
      - attach_workspace:
          at: "~"
      - run:
          name: Lint
          command: make lint
      - run:
          name: Test
          command: make test TESTOPTS=-v

  # needs $GOOGLE_SERVICE_ACCOUNT, $FIOBANK_API_KEY
  sync:
    executor: python-js
    steps:
      - attach_workspace:
          at: "~"
      - run: 'date +"%Y-%m-%d" > .today'  # saves today's date to a file so it can be used to expire cache
      - restore_cache:  # caches all HTTP communication of the scrapers for one day
          key: scrapy-{{ checksum ".today" }}
      - run:
          name: Sync data
          command: |
            export PROXIES_ENABLED=1
            export DISCORD_MUTATIONS_ENABLED=1
            make sync
      - save_cache:
          key: scrapy-{{ checksum ".today" }}
          paths:
            - .scrapy
      - persist_to_workspace:
          root: "~"
          paths:
              - project/juniorguru/data
              - project/juniorguru/images
      - run: tar -cvzf backup.tar.gz ./juniorguru/data
      - store_artifacts:
          path: ./backup.tar.gz  # all data gets backed up as a CI artifact

  build:
    executor: python-js
    steps:
      - run:
          name: Install fonts
          command: |
            echo "deb http://ftp.us.debian.org/debian buster main contrib" | sudo tee -a /etc/apt/sources.list
            echo ttf-mscorefonts-installer msttcorefonts/accepted-mscorefonts-eula select true | sudo debconf-set-selections
            sudo apt-get update
            while ! sudo apt-get install ttf-mscorefonts-installer
            do
              echo "Fonts installation failed! Retrying..."
            done
      - attach_workspace:
          at: "~"
      - run: make build
      - persist_to_workspace:
          root: "~"
          paths:
              - project/public

  deploy:
    executor: python-js
    steps:
      - attach_workspace:
          at: "~"
      - add_ssh_keys:
          fingerprints:
            - "7b:0b:2c:9f:fb:18:db:35:8e:f4:3d:49:73:37:ee:c4"
      - run: mkdir -p ~/.ssh
      - run: ssh-keyscan github.com >> ~/.ssh/known_hosts
      - gh-pages/deploy:
          build-dir: "public"
          git-email: "kure@junior.guru"
          git-user: "Ku≈ôe"
          commit-message: '"üê£ deployment of ${COMMIT} [skip ci]"'
          ssh-fingerprints: "7b:0b:2c:9f:fb:18:db:35:8e:f4:3d:49:73:37:ee:c4"
          tmp-dir: ".deploy-tmp"
          workspace-root: "~/project"

  # needs $SMTP_* (see readme)
  send:
    executor: python-js
    steps:
      - attach_workspace:
          at: "~"
      - run: |
          export SMTP_ENABLED=1
          make send

  check-anchors:
    executor: python-js
    steps:
      - attach_workspace:
          at: "~"
      - run: make check-anchors

  check-links:
    executor: python-js
    steps:
      - attach_workspace:
          at: "~"
      - run: make check-links CHECKOPTS=--retry

  check-scrapers:
    executor: python-js
    steps:
      - attach_workspace:
          at: "~"
      - run: make check-scrapers


workflows:
  version: 2

  push:
    jobs:
      - install
      - lint-and-test:
          requires:
            - install
      - sync:
          requires:
            - install
      - build:
          requires:
            - sync
      - check-scrapers:
          requires:
            - sync
      - check-anchors:
          requires:
            - build
      - deploy:
          filters:
            branches:
              only:
                - main
          requires:
            - build
            - lint-and-test

  nightly:
    jobs:
      - install
      - sync:
          requires:
            - install
      - build:
          requires:
            - sync
      - check-scrapers:
          requires:
            - sync
      - check-links:
          requires:
            - build
      - deploy:
          requires:
            - build
    triggers:
      - schedule:
          cron: "0 4 * * *"
          filters:
            branches:
              only:
                - main

  sending:
    jobs:
      - install
      - sync:
          requires:
            - install
      - send:
          requires:
            - sync
    triggers:
      - schedule:
          cron: "0 13 * * *"
          filters:
            branches:
              only:
                - main
